{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardsArray","map","user","i","key","SearchBox","asd","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filterRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sOAceA,EAZF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GACzB,OACI,yBAAKC,UAAU,uDACjB,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,cACpB,6BACC,4BAAKF,GACL,2BAAIC,MCYOK,EAjBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACZC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OACC,kBAAC,EAAD,CAAMC,IAAKD,EACXT,GAAKK,EAAOI,GAAGT,GACfF,KAAOO,EAAOI,GAAGX,KACjBC,MAAQM,EAAOI,GAAGV,WAGpB,OACC,yBAAKE,UAAU,MACbK,ICGWK,EAfG,SAAC,GAAuB,EAAtBC,IAAuB,IAAnBC,EAAkB,EAAlBA,aAEvB,OACC,yBAAKZ,UAAU,OACd,2BACCA,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCGDI,EAZD,SAACC,GACd,OACC,yBAAKC,MAAO,CAACC,UAAW,SACxBC,OAAO,kBACPC,OAAO,UACLJ,EAAMK,WCoDKC,G,wDAlDd,aAAc,IAAD,8BACZ,gBAoBDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CACbC,YAAYF,EAAMG,OAAOC,SArB1B,EAAKC,MAAQ,CACZ1B,OAAQ,GACRuB,YAAa,IAJF,E,gEAQO,IAAD,OAGlBI,MAAM,8CAA8CC,MACnD,SAAAC,GACC,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACL,EAAKT,SAAS,CAACtB,OAAO+B,S,+BAWhB,IAAD,EACoBC,KAAKN,MAA1B1B,EADC,EACDA,OAAOuB,EADN,EACMA,YACPU,EAAejC,EAAOkC,QAAO,SAAAC,GAClC,OAAOA,EAAM1C,KAAK2C,cAAcC,SAC/Bd,EAAYa,kBAGd,OAAIpC,EAAOsC,OAIT,yBAAK1C,UAAU,MACd,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWY,aAAgBwB,KAAKZ,iBAChC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUpB,OAAUiC,MAPhB,2C,GApCQM,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAGDC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ad5224bc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,email,id}) => {\r\n\treturn (\r\n   \t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='Robot' src={`https://robohash.org/${id}?100x100`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n \t);\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\tconst cardsArray = robots.map((user, i) =>{\r\n\t\treturn (\r\n\t\t\t<Card key={i} \r\n\t\t\tid ={robots[i].id} \r\n\t\t\tname ={robots[i].name}\r\n\t\t\temail ={robots[i].email}/>\r\n\t\t);\r\n\t})\r\n\treturn(\r\n\t\t<div className='tc'>\r\n\t\t\t{cardsArray}\r\n\t  \t</div>\r\n\t\t\t\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({asd,searchChange}) => {\r\n\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='pa2 ba b--green bg-lightest-blue' \r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='Search Robots' \r\n\t\t\t\tonChange = {searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nconst Scroll =(props) =>{\r\n\treturn(\r\n\t\t<div style={{overflowY: 'scroll', \r\n\t\tborder:'1px solid black',\r\n\t\theight:'500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t\t\r\n\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\n\r\nimport './App.css'\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchField: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t//con este comando estamos haciendo una solicitud\r\n\t\t//y que el fetch lo reciba\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(\r\n\t\t\tresponse =>{\r\n\t\t\t\treturn response.json();\r\n\t\t\t})\r\n\t\t\t.then(users =>{\r\n\t\t\t\tthis.setState({robots:users})\r\n\t\t\t})\r\n\t\t\r\n\t}\r\n\r\n\tonSearchChange = (event) =>{\r\n\t\tthis.setState({\r\n\t\t\tsearchField:event.target.value\r\n\t\t})\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst{robots,searchField }=this.state \r\n\t\tconst filterRobots = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(\r\n\t\t\t\tsearchField.toLowerCase());\r\n\t\t})\r\n\t\t//en caso de que la carga de los robots dure mucho\r\n\t\tif(!robots.length){\r\n\t\t\treturn <h1>Loading</h1>\r\n\t\t}else{\r\n\t\t\treturn(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>RobotFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange = {this.onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<CardList robots = {filterRobots}/>\t\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\t\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<App/>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}